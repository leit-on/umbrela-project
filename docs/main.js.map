{"version":3,"file":"main.js","mappings":"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","sources":["./src/app/app-routing.module.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/dashboard/dashboard-components/spinner-dialog-component/progress-spinner-dialog.component.ts","./src/app/dashboard/dashboard-components/spinner-dialog-component/progress-spinner-dialog.component.html","./src/app/demo-material-module.ts","./src/app/layouts/full/full.component.ts","./src/app/layouts/full/full.component.html","./src/app/layouts/full/header/header.component.ts","./src/app/layouts/full/sidebar/sidebar.component.html","./src/app/layouts/full/sidebar/sidebar.component.ts","./src/app/shared/accordion/accordion.directive.ts","./src/app/shared/accordion/accordionanchor.directive.ts","./src/app/shared/accordion/accordionlink.directive.ts","./src/app/shared/accordion/index.ts","./src/app/shared/menu-items/menu-filter-items.ts","./src/app/shared/shared.module.ts","./src/app/shared/spinner.component.ts","./src/environments/environment.ts","./src/main.ts"],"sourcesContent":["import { Routes } from '@angular/router';\n\nimport { FullComponent } from './layouts/full/full.component';\n\nexport const AppRoutes: Routes = [\n  {\n    path: '',\n    component: FullComponent,\n    children: [\n      {\n        path: '',\n        redirectTo: '/dashboard',\n        pathMatch: 'full'\n      },\n      {\n        path: '',\n        loadChildren:\n          () => import('./material-component/material.module').then(m => m.MaterialComponentsModule)\n      },\n      {\n        path: 'dashboard',\n        loadChildren: () => import('./dashboard/dashboard.module').then(m => m.DashboardModule)\n      }\n    ]\n  }\n];","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'previsao-app';\n}\n","<!-- ============================================================== -->\n<!-- Main wrapper - style you can find in pages.scss -->\n<!-- ============================================================== -->\n<router-outlet><app-spinner></app-spinner></router-outlet>","import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport {HomeComponent} from './pages/home/home.component'\n\nimport { AppComponent } from './app.component';\n\n\nimport { RouterModule } from '@angular/router';\nimport { FormsModule } from '@angular/forms';\nimport { HttpClientModule, HttpClient } from '@angular/common/http';\nimport { LocationStrategy, PathLocationStrategy } from '@angular/common';\nimport { AppRoutes } from './app-routing.module';\n\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { FullComponent } from './layouts/full/full.component';\nimport { AppHeaderComponent } from './layouts/full/header/header.component';\nimport { AppSidebarComponent } from './layouts/full/sidebar/sidebar.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { DemoMaterialModule } from './demo-material-module';\n\nimport { SharedModule } from './shared/shared.module';\nimport { SpinnerComponent } from './shared/spinner.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    FullComponent,\n    AppHeaderComponent,\n    SpinnerComponent,\n    AppSidebarComponent\n  ],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    DemoMaterialModule,\n    FormsModule,\n    FlexLayoutModule,\n    HttpClientModule,\n    SharedModule,\n    RouterModule.forRoot(AppRoutes)\n  ],\n  providers: [\n    {\n      provide: LocationStrategy,\n      useClass: PathLocationStrategy\n    }\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-progress-spinner-dialog',\r\n  templateUrl: './progress-spinner-dialog.component.html'\r\n})\r\nexport class ProgressSpinnerDialogComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}","<mat-spinner></mat-spinner>","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport { NgModule } from '@angular/core';\r\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { MatChipsModule } from '@angular/material/chips';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatExpansionModule } from '@angular/material/expansion';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatGridListModule } from '@angular/material/grid-list';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatListModule } from '@angular/material/list';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatPaginatorModule } from '@angular/material/paginator';\r\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\nimport { MatRadioModule } from '@angular/material/radio';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatSidenavModule } from '@angular/material/sidenav';\r\nimport { MatSliderModule } from '@angular/material/slider';\r\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\r\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { MatSortModule } from '@angular/material/sort';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { MatTabsModule } from '@angular/material/tabs';\r\nimport { MatToolbarModule } from '@angular/material/toolbar';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { MatStepperModule } from '@angular/material/stepper';\r\nimport { MatBadgeModule } from '@angular/material/badge';\r\nimport { MatNativeDateModule, MatRippleModule } from '@angular/material/core';\r\nimport { MatBottomSheetModule } from '@angular/material/bottom-sheet';\r\n\r\nimport { CdkTableModule } from '@angular/cdk/table';\r\nimport { CdkAccordionModule } from '@angular/cdk/accordion';\r\nimport { A11yModule } from '@angular/cdk/a11y';\r\nimport { BidiModule } from '@angular/cdk/bidi';\r\nimport { OverlayModule } from '@angular/cdk/overlay';\r\nimport { PlatformModule } from '@angular/cdk/platform';\r\nimport { ObserversModule } from '@angular/cdk/observers';\r\nimport { PortalModule } from '@angular/cdk/portal';\r\n\r\n/**\r\n * NgModule that includes all Material modules that are required to serve the demo-app.\r\n */\r\n@NgModule({\r\n    exports: [\r\n        MatAutocompleteModule,\r\n        MatButtonModule,\r\n        MatBottomSheetModule,\r\n        MatButtonToggleModule,\r\n        MatCardModule,\r\n        MatCheckboxModule,\r\n        MatChipsModule,\r\n        MatTableModule,\r\n        MatDatepickerModule,\r\n        MatDialogModule,\r\n        MatExpansionModule,\r\n        MatFormFieldModule,\r\n        MatGridListModule,\r\n        MatIconModule,\r\n        MatInputModule,\r\n        MatListModule,\r\n        MatMenuModule,\r\n        MatPaginatorModule,\r\n        MatProgressBarModule,\r\n        MatProgressSpinnerModule,\r\n        MatRadioModule,\r\n        MatRippleModule,\r\n        MatSelectModule,\r\n        MatBadgeModule,\r\n        MatSidenavModule,\r\n        MatSlideToggleModule,\r\n        MatSliderModule,\r\n        MatSnackBarModule,\r\n        MatSortModule,\r\n        MatStepperModule,\r\n        MatTabsModule,\r\n        MatToolbarModule,\r\n        MatTooltipModule,\r\n        MatNativeDateModule,\r\n        CdkTableModule,\r\n        A11yModule,\r\n        BidiModule,\r\n        CdkAccordionModule,\r\n        ObserversModule,\r\n        OverlayModule,\r\n        PlatformModule,\r\n        PortalModule\r\n    ]\r\n})\r\nexport class DemoMaterialModule { }\r\n","import { MediaMatcher } from '@angular/cdk/layout';\r\nimport {ChangeDetectorRef, Component,OnDestroy,AfterViewInit} from '@angular/core';\r\nimport { MenuItems } from '../../shared/menu-items/menu-filter-items';\r\nimport { Observable } from 'rxjs';\r\nimport { ProgressSpinnerDialogComponent } from 'src/app/dashboard/dashboard-components/spinner-dialog-component/progress-spinner-dialog.component';\r\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\r\n\r\n\r\n/** @title Responsive sidenav */\r\n@Component({\r\n  selector: 'app-full-layout',\r\n  templateUrl: 'full.component.html',\r\n  styleUrls: []\r\n})\r\nexport class FullComponent implements OnDestroy, AfterViewInit {\r\n  mobileQuery: MediaQueryList;\r\n  value='São Paulo';\r\n  private _mobileQueryListener: () => void;\r\n\r\n  constructor(\r\n    changeDetectorRef: ChangeDetectorRef,\r\n    media: MediaMatcher,\r\n    public menuItems: MenuItems,\r\n    private dialog: MatDialog\r\n  ) {\r\n    this.mobileQuery = media.matchMedia('(min-width: 768px)');\r\n    this._mobileQueryListener = () => changeDetectorRef.detectChanges();\r\n    this.mobileQuery.addListener(this._mobileQueryListener);\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.mobileQuery.removeListener(this._mobileQueryListener);\r\n  }\r\n  ngAfterViewInit() {}\r\n\r\n\r\n  onEnter(city:string){\r\n\t\tconsole.log('busca de cidade:', city)\r\n\t\tthis.showProgressSpinnerUntilExecuted( new Observable(this.myObservable));\r\n\t}\r\n\r\n\r\n  myObservable(observer:any) {\r\n\t\tsetTimeout(() => {\r\n\r\n\t\t\t\r\n\r\n\r\n\r\n\t\tobserver.next(\"done waiting for 5 sec\");\r\n\t\tobserver.complete();\r\n\t\t}, 1000);\r\n\t}\r\n\r\n\tshowProgressSpinnerUntilExecuted(observable: Observable<Object>) {\r\n\t\tlet dialogRef: MatDialogRef<ProgressSpinnerDialogComponent> = this.dialog.open(ProgressSpinnerDialogComponent, {\r\n\t\t  panelClass: 'transparent',\r\n\t\t  disableClose: true\r\n\t\t});\r\n\t\tlet subscription = observable.subscribe(\r\n\t\t  (response: any) => {\r\n\t\t\tsubscription.unsubscribe();\r\n\t\t\t//handle response\r\n\t\t\tconsole.log(response);\r\n\t\t\tdialogRef.close();\r\n\t\t\t\r\n\t\t  },\r\n\t\t  (error) => {\r\n\t\t\tsubscription.unsubscribe();\r\n\t\t\t//handle error\r\n\t\t\tdialogRef.close();\r\n\t\t\t\r\n\t\t  }\r\n\t\t);\r\n\t}\r\n\t\r\n\r\n}\r\n","<!-- ============================================================== -->\r\n<!-- Main wrapper - style you can find in pages.scss -->\r\n<!-- ============================================================== -->\r\n<div class=\"main-container\">\r\n    <!-- ============================================================== -->\r\n    <!-- Topbar - style you can find in header.scss -->\r\n    <!-- ============================================================== -->\r\n    <mat-toolbar style=\"background: #4f5066;\" class=\"topbar telative\">\r\n        <!-- ============================================================== -->\r\n        <!-- Logo - style you can find in header.scss -->\r\n        <!-- ============================================================== -->\r\n        <div class=\"navbar-header\">\r\n            <a class=\"navbar-brand\" href=\"index.html\">\r\n                <!-- Logo icon --><b>\r\n                    <!--You can put here icon as well // <i class=\"wi wi-sunset\"></i> //-->\r\n                    <!-- Dark Logo icon -->\r\n                    <img src=\"assets/images/logo-icon.png\" alt=\"homepage\" class=\"dark-logo\">\r\n                    <!-- Light Logo icon -->\r\n                    <img src=\"assets/images/logo-light-icon.png\" alt=\"homepage\" class=\"light-logo\">\r\n                </b>\r\n                <!--End Logo icon -->\r\n                <!-- Logo text -->\r\n                <span fxShow=\"false\" fxShow.gt-xs>\r\n                    <!-- dark Logo text -->\r\n                    <img src=\"assets/images/logo-text.png\" alt=\"homepage\" class=\"dark-logo\">\r\n                    <!-- Light Logo text -->\r\n                    <p style=\"color: white \">Umbrela Trip</p>\r\n                </span> </a>\r\n        </div>\r\n        <!-- ============================================================== -->\r\n        <!-- sidebar toggle -->\r\n        <!-- ============================================================== -->\r\n\r\n        <button mat-icon-button (click)=\"snav.toggle()\" value=\"sidebarclosed\" style=\"color: white;\">\r\n            <mat-icon>menu</mat-icon>\r\n        </button>\r\n        <span fxFlex>\r\n\r\n\r\n        </span>\r\n        <!-- <mat-form-field style=\"max-width: 200px; \">\r\n            <input matInput type=\"text\" [(ngModel)]=\"value\"\r\n                (keyup.enter)=\"onEnter(value)\">\r\n            <button *ngIf=\"value\" matSuffix mat-icon-button aria-label=\"Clear\" (click)=\"value=''\">\r\n                <mat-icon>close</mat-icon>\r\n            </button>\r\n            <mat-icon matSuffix>search</mat-icon>\r\n        </mat-form-field> -->\r\n        <span fxFlex>\r\n\r\n\r\n        </span>\r\n        <!-- ============================================================== -->\r\n        <!-- app header component - style you can find in header.scss / header.component.ts-->\r\n        <!-- ============================================================== -->\r\n        <app-header></app-header>\r\n\r\n        <button mat-icon-button class=\"example-icon\" aria-label=\"Example icon-button with share icon\"  style=\"color: white;\">\r\n            <mat-icon>share</mat-icon>\r\n        </button>\r\n\r\n    </mat-toolbar>\r\n    <!-- ============================================================== -->\r\n    <!-- End Topbar - style you can find in pages.scss -->\r\n    <!-- ============================================================== -->\r\n    <mat-sidenav-container class=\"example-sidenav-container\" [style.marginTop.px]=\"mobileQuery.matches ? 0 : 0\">\r\n        <!-- ============================================================== -->\r\n        <!-- Sidebar - style you can find in sidebar.scss -->\r\n        <!-- ============================================================== -->\r\n        <mat-sidenav #snav id=\"snav\" class=\"dark-sidebar pl-xs\" [mode]=\"mobileQuery.matches ? 'side' : 'over'\"\r\n            fixedTopGap=\"0\" [opened]=\"mobileQuery.matches\" [disableClose]=\"mobileQuery.matches\">\r\n\r\n            <app-sidebar></app-sidebar>\r\n\r\n\r\n        </mat-sidenav>\r\n        <!-- ============================================================== -->\r\n        <!-- Sidebar - style you can find in sidebar.scss -->\r\n        <!-- ============================================================== -->\r\n\r\n        <!-- ============================================================== -->\r\n        <!-- Page container - style you can find in pages.scss -->\r\n        <!-- ============================================================== -->\r\n        <mat-sidenav-content class=\"page-wrapper\">\r\n\r\n            <div class=\"page-content\">\r\n\r\n                <router-outlet><app-spinner></app-spinner></router-outlet>\r\n\r\n            </div>\r\n\r\n        </mat-sidenav-content>\r\n        <!-- ============================================================== -->\r\n        <!-- Page container - style you can find in pages.scss -->\r\n        <!-- ============================================================== -->\r\n    </mat-sidenav-container>\r\n</div>","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-header',\r\n  templateUrl: './header.component.html',\r\n  styleUrls: []\r\n})\r\nexport class AppHeaderComponent {}\r\n","<!-- ============================================================== -->\r\n<!-- sidebar -->\r\n<!-- ============================================================== -->\r\n <div class=\"user-profile\" style=\"background: url(assets/images/background/umbrela1.jpg) no-repeat; height: 200px;\">\r\n    <!-- User profile image -->\r\n    <!-- <div class=\"profile-img\"> <img src=\"assets/images/users/profile.png\" alt=\"user\"> </div> -->\r\n    <!-- User profile text-->\r\n    <div></div>\r\n    <!-- ============================================================== -->\r\n    <!-- Profile - style you can find in header.scss -->\r\n    <!-- ============================================================== -->\r\n    <div class=\"profile-text\"> <i class=\"ti-angle-down font-12 m-l-5\"></i></div>\r\n\r\n    <!-- <div class=\"profile-text\"><a [matMenuTriggerFor]=\"sdprofile\" class=\"\"> Ola <i class=\"ti-angle-down font-12 m-l-5\"></i></a></div> -->\r\n    <!-- <mat-menu #sdprofile=\"matMenu\" #menu=\"matMenu\" [overlapTrigger]=\"true\">\r\n        <button mat-menu-item>\r\n            <mat-icon>settings</mat-icon> Settings </button>\r\n        <button mat-menu-item>\r\n            <mat-icon>account_box</mat-icon> Profile </button>\r\n        <button mat-menu-item>\r\n            <mat-icon>notifications_off</mat-icon> Disable notifications </button>\r\n        <button mat-menu-item>\r\n            <mat-icon>exit_to_app</mat-icon> Sign Out </button>\r\n    </mat-menu> -->\r\n\r\n</div>\r\n<mat-nav-list appAccordion>\r\n    <mat-list-item appAccordionLink *ngFor=\"let menuitem of menuItems.getMenuitem()\" routerLinkActive=\"selected\" group=\"{{menuitem.state}}\">\r\n        <a class=\"\" appAccordionToggle [routerLink]=\"['/', menuitem.state]\" *ngIf=\"menuitem.type === 'link'\">\r\n            <mat-icon>{{ menuitem.icon }}</mat-icon> \r\n            <span>{{ menuitem.name }}</span> \r\n            <span fxFlex></span> \r\n            <span class=\"label label-{{ badge }}\" *ngFor=\"let badge of menuitem.badge\">{{ badge }}</span>\r\n        </a>\r\n\r\n        \r\n    </mat-list-item>\r\n\r\n</mat-nav-list>","import { ChangeDetectorRef, Component, OnDestroy } from '@angular/core';\r\nimport { MediaMatcher } from '@angular/cdk/layout';\r\nimport { MenuItems } from '../../../shared/menu-items/menu-filter-items';\r\n@Component({\r\n  selector: 'app-sidebar',\r\n  templateUrl: './sidebar.component.html',\r\n  styleUrls: []\r\n})\r\nexport class AppSidebarComponent implements OnDestroy {\r\n  mobileQuery: MediaQueryList;\r\n\r\n  private _mobileQueryListener: () => void;\r\n\r\n  constructor(\r\n    changeDetectorRef: ChangeDetectorRef,\r\n    media: MediaMatcher,\r\n    public menuItems: MenuItems\r\n  ) {\r\n    this.mobileQuery = media.matchMedia('(min-width: 768px)');\r\n    this._mobileQueryListener = () => changeDetectorRef.detectChanges();\r\n    this.mobileQuery.addListener(this._mobileQueryListener);\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.mobileQuery.removeListener(this._mobileQueryListener);\r\n  }\r\n}\r\n","import {\r\n  Directive,\r\n  OnInit,\r\n  AfterViewInit,\r\n  AfterContentChecked\r\n} from '@angular/core';\r\nimport { Router, NavigationEnd } from '@angular/router';\r\n\r\nimport { AccordionLinkDirective } from './accordionlink.directive';\r\nimport { filter } from 'rxjs/operators';\r\n\r\n@Directive({\r\n  selector: '[appAccordion]'\r\n})\r\nexport class AccordionDirective implements AfterContentChecked {\r\n  protected navlinks: Array<AccordionLinkDirective> = [];\r\n\r\n  closeOtherLinks(selectedLink: AccordionLinkDirective): void {\r\n    this.navlinks.forEach((link: AccordionLinkDirective) => {\r\n      if (link !== selectedLink) {\r\n        link.selected = false;\r\n      }\r\n    });\r\n  }\r\n\r\n  addLink(link: AccordionLinkDirective): void {\r\n    this.navlinks.push(link);\r\n  }\r\n\r\n  removeGroup(link: AccordionLinkDirective): void {\r\n    const index = this.navlinks.indexOf(link);\r\n    if (index !== -1) {\r\n      this.navlinks.splice(index, 1);\r\n    }\r\n  }\r\n\r\n  checkOpenLinks() {\r\n    this.navlinks.forEach((link: AccordionLinkDirective) => {\r\n      if (link.group) {\r\n        const routeUrl = this.router.url;\r\n        const currentUrl = routeUrl.split('/');\r\n        if (currentUrl.indexOf(link.group) > 0) {\r\n          link.selected = true;\r\n          this.closeOtherLinks(link);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  ngAfterContentChecked(): void {\r\n    this.router.events\r\n      .pipe(filter(event => event instanceof NavigationEnd))\r\n      .subscribe(e => this.checkOpenLinks());\r\n  }\r\n\r\n  constructor(private router: Router) {\r\n    setTimeout(() => this.checkOpenLinks());\r\n  }\r\n}\r\n","import { Directive, HostListener, Inject } from '@angular/core';\r\n\r\nimport { AccordionLinkDirective } from './accordionlink.directive';\r\n\r\n@Directive({\r\n  selector: '[appAccordionToggle]'\r\n})\r\nexport class AccordionAnchorDirective {\r\n  protected navlink: AccordionLinkDirective;\r\n\r\n  constructor(@Inject(AccordionLinkDirective) navlink: AccordionLinkDirective) {\r\n    this.navlink = navlink;\r\n  }\r\n\r\n  @HostListener('click', ['$event'])\r\n  onClick(e: any) {\r\n    this.navlink.toggle();\r\n  }\r\n}\r\n","import {\r\n  Directive,\r\n  HostBinding,\r\n  Inject,\r\n  Input,\r\n  OnInit,\r\n  OnDestroy\r\n} from '@angular/core';\r\n\r\nimport { AccordionDirective } from './accordion.directive';\r\n\r\n@Directive({\r\n  selector: '[appAccordionLink]'\r\n})\r\nexport class AccordionLinkDirective implements OnInit, OnDestroy {\r\n  @Input()\r\n  public group: any;\r\n\r\n  @HostBinding('class.selected')\r\n  @Input()\r\n  get selected(): boolean {\r\n    return this._selected;\r\n  }\r\n\r\n  set selected(value: boolean) {\r\n    this._selected = value;\r\n    if (value) {\r\n      this.nav.closeOtherLinks(this);\r\n    }\r\n  }\r\n\r\n  protected _selected: boolean=false;\r\n  protected nav: AccordionDirective;\r\n\r\n  constructor(@Inject(AccordionDirective) nav: AccordionDirective) {\r\n    this.nav = nav;\r\n  }\r\n\r\n  ngOnInit(): any {\r\n    this.nav.addLink(this);\r\n  }\r\n\r\n  ngOnDestroy(): any {\r\n    this.nav.removeGroup(this);\r\n  }\r\n\r\n  toggle(): any {\r\n    this.selected = !this.selected;\r\n  }\r\n}\r\n","export * from './accordionanchor.directive';\r\nexport * from './accordionlink.directive';\r\nexport * from './accordion.directive';\r\n","import { Injectable } from '@angular/core';\r\n\r\nexport interface Menu {\r\n  state: string;\r\n  name: string;\r\n  type: string;\r\n  icon: string;\r\n  badge: string;\r\n\r\n}\r\n\r\nconst MENUITEMS = [\r\n  { state: 'dashboard', name: 'Inicio', type: 'link', icon: 'home', badge: ''}\r\n  // { state: 'button', type: 'link', name: 'Filtros', icon: 'crop_7_5', badge: '' },\r\n  // { state: 'dashboard', name: 'Inicio', type: 'link', icon: 'home', badge: ''},\r\n  // { state: 'button', type: 'link', name: 'Buttons', icon: 'crop_7_5', badge: '' },\r\n  // { state: 'grid', type: 'link', name: 'Grid List', icon: 'view_comfy', badge: '' },\r\n  // { state: 'lists', type: 'link', name: 'Lists', icon: 'view_list', badge: '' },\r\n  // { state: 'menu', type: 'link', name: 'Menu', icon: 'view_headline', badge: '' },\r\n  // { state: 'tabs', type: 'link', name: 'Tabs', icon: 'tab', badge: '' },\r\n  // { state: 'stepper', type: 'link', name: 'Stepper', icon: 'web', badge: '' },\r\n  // {\r\n  //   state: 'expansion',\r\n  //   type: 'link',\r\n  //   name: 'Expansion Panel',\r\n  //   icon: 'vertical_align_center'\r\n  //   , badge: ''\r\n  // },\r\n  // { state: 'chips', type: 'link', name: 'Chips', icon: 'vignette', badge: '' },\r\n  // { state: 'toolbar', type: 'link', name: 'Toolbar', icon: 'voicemail', badge: '' },\r\n  // {\r\n  //   state: 'progress-snipper',\r\n  //   type: 'link',\r\n  //   name: 'Progress snipper',\r\n  //   icon: 'border_horizontal', badge: ''\r\n  // },\r\n  // {\r\n  //   state: 'progress',\r\n  //   type: 'link',\r\n  //   name: 'Progress Bar',\r\n  //   icon: 'blur_circular', badge: ''\r\n  // },\r\n  // {\r\n  //   state: 'dialog',\r\n  //   type: 'link',\r\n  //   name: 'Dialog',\r\n  //   icon: 'assignment_turned_in', badge: ''\r\n  // },\r\n  // { state: 'tooltip', type: 'link', name: 'Tooltip', icon: 'assistant', badge: '' },\r\n  // { state: 'snackbar', type: 'link', name: 'Snackbar', icon: 'adb', badge: '' },\r\n  // { state: 'slider', type: 'link', name: 'Slider', icon: 'developer_mode', badge: '' },\r\n  // {\r\n  //   state: 'slide-toggle',\r\n  //   type: 'link',\r\n  //   name: 'Slide Toggle',\r\n  //   icon: 'all_inclusive', badge: ''\r\n  // }\r\n];\r\n\r\n@Injectable()\r\nexport class MenuItems {\r\n  getMenuitem(): Menu[] {\r\n    return MENUITEMS;\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\n\r\nimport { MenuItems } from './menu-items/menu-filter-items';\r\nimport { AccordionAnchorDirective, AccordionLinkDirective, AccordionDirective } from './accordion';\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AccordionAnchorDirective,\r\n    AccordionLinkDirective,\r\n    AccordionDirective\r\n  ],\r\n  exports: [\r\n    AccordionAnchorDirective,\r\n    AccordionLinkDirective,\r\n    AccordionDirective\r\n   ],\r\n  providers: [ MenuItems ]\r\n})\r\nexport class SharedModule { }\r\n","import { Component, Input, OnDestroy, Inject, ViewEncapsulation } from '@angular/core';\r\nimport { Router, NavigationStart, NavigationEnd, NavigationCancel, NavigationError } from '@angular/router';\r\nimport { DOCUMENT } from '@angular/common';\r\n\r\n@Component({\r\n  selector: 'app-spinner',\r\n  template: `<div class=\"preloader\" *ngIf=\"isSpinnerVisible\">\r\n        <div class=\"spinner\">\r\n          <div class=\"double-bounce1\"></div>\r\n          <div class=\"double-bounce2\"></div>\r\n        </div>\r\n    </div>`,\r\n  encapsulation: ViewEncapsulation.None\r\n})\r\nexport class SpinnerComponent implements OnDestroy {\r\n  public isSpinnerVisible = true;\r\n\r\n  @Input()\r\n  public backgroundColor = 'rgba(0, 115, 170, 0.69)';\r\n\r\n  constructor(\r\n    private router: Router,\r\n    @Inject(DOCUMENT) private document: Document\r\n  ) {\r\n    this.router.events.subscribe(\r\n      event => {\r\n        if (event instanceof NavigationStart) {\r\n          this.isSpinnerVisible = true;\r\n        } else if (\r\n          event instanceof NavigationEnd ||\r\n          event instanceof NavigationCancel ||\r\n          event instanceof NavigationError\r\n        ) {\r\n          this.isSpinnerVisible = false;\r\n        }\r\n      },\r\n      () => {\r\n        this.isSpinnerVisible = false;\r\n      }\r\n    );\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.isSpinnerVisible = false;\r\n  }\r\n}\r\n","// The file contents for the current environment will overwrite these during build.\r\n// The build system defaults to the dev environment which uses `environment.ts`, but if you do\r\n// `ng build --env=prod` then `environment.prod.ts` will be used instead.\r\n// The list of which env maps to which file can be found in `.angular-cli.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\nimport 'hammerjs';\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic()\n  .bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"names":["FullComponent","AppRoutes","path","component","children","redirectTo","pathMatch","loadChildren","then","m","MaterialComponentsModule","DashboardModule","AppComponent","constructor","selectors","decls","vars","template","i0","BrowserModule","RouterModule","FormsModule","HttpClientModule","LocationStrategy","PathLocationStrategy","FlexLayoutModule","AppHeaderComponent","AppSidebarComponent","BrowserAnimationsModule","DemoMaterialModule","SharedModule","SpinnerComponent","AppModule","bootstrap","provide","useClass","imports","forRoot","declarations","ProgressSpinnerDialogComponent","ngOnInit","MatAutocompleteModule","MatButtonModule","MatButtonToggleModule","MatCardModule","MatCheckboxModule","MatChipsModule","MatDatepickerModule","MatDialogModule","MatExpansionModule","MatFormFieldModule","MatGridListModule","MatIconModule","MatInputModule","MatListModule","MatMenuModule","MatPaginatorModule","MatProgressBarModule","MatProgressSpinnerModule","MatRadioModule","MatSelectModule","MatSidenavModule","MatSliderModule","MatSlideToggleModule","MatSnackBarModule","MatSortModule","MatTableModule","MatTabsModule","MatToolbarModule","MatTooltipModule","MatStepperModule","MatBadgeModule","MatNativeDateModule","MatRippleModule","MatBottomSheetModule","CdkTableModule","CdkAccordionModule","A11yModule","BidiModule","OverlayModule","PlatformModule","ObserversModule","PortalModule","exports","Observable","changeDetectorRef","media","menuItems","dialog","mobileQuery","matchMedia","_mobileQueryListener","detectChanges","addListener","ngOnDestroy","removeListener","ngAfterViewInit","onEnter","city","console","log","showProgressSpinnerUntilExecuted","myObservable","observer","setTimeout","next","complete","observable","dialogRef","open","panelClass","disableClose","subscription","subscribe","response","unsubscribe","close","error","consts","encapsulation","NavigationEnd","filter","AccordionDirective","closeOtherLinks","selectedLink","navlinks","forEach","link","selected","addLink","push","removeGroup","index","indexOf","splice","checkOpenLinks","group","routeUrl","router","url","currentUrl","split","ngAfterContentChecked","events","pipe","event","e","AccordionLinkDirective","AccordionAnchorDirective","navlink","onClick","toggle","hostBindings","ctx","_selected","value","nav","hostVars","MENUITEMS","state","name","type","icon","badge","MenuItems","getMenuitem","factory","NavigationStart","NavigationCancel","NavigationError","DOCUMENT","document","isSpinnerVisible","inputs","backgroundColor","environment","production","enableProdMode","__NgCli_bootstrap_1","bootstrapModule","catch","err"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}